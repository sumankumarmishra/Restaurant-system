@model Restugrp07.Models.Resevation

@{
    ViewBag.Title = "Approveresevation";
}

<h1>Approve resevation and assign waiter</h1>

<style>
    input[type=checkbox] {
        /* Double-sized Checkboxes */
        -ms-transform: scale(2); /* IE */
        -moz-transform: scale(2); /* FF */
        -webkit-transform: scale(2); /* Safari and Chrome */
        -o-transform: scale(2); /* Opera */
        transform: scale(2);
        padding: 10px;
    }
</style>



@Html.Action("Assignwaiter","Admin")

@using (Html.BeginForm("Approveresevation", "Admin", FormMethod.Post, new { enctype = "multipart/form-data", id = "myForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.Label("Admin signature", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                <div id="signature-pad" class="m-signature-pad">
                    <div class="m-signature-pad--body">
                        <canvas></canvas>
                        <input type="hidden" hidden name="signature" id="signature" value="">
                    </div>
                </div>
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.isResevationApproved, "Check to approve or leave blank", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.isResevationApproved)
                    @Html.ValidationMessageFor(model => model.isResevationApproved, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Proceed"  onclick="submitForm()" class="btn btn-success" />
            </div>
        </div>
    </div>
}




<head>
    <meta charset="UTF-8" />
    <link href="w3.css" type="text/css" rel="stylesheet" />

    <style type="text/css">
        .m-signature-pad--body canvas {
            position: relative;
            left: 0;
            top: 0;
            width: 100%;
            height: 250px;
            border: 1px solid #CCCCCC;
        }
    </style>

</head>











<script src="~/Sign/signature_pad.js"></script>
<script type="text/javascript">
    var wrapper = document.getElementById("signature-pad"),
        canvas = wrapper.querySelector("canvas"),
        signaturePad;

    /**
    *  Behandlung der Größenänderung der Unterschriftenfelds
    */
    function resizeCanvas() {
        var oldContent = signaturePad.toData();
        var ratio = Math.max(window.devicePixelRatio || 1, 1);
        canvas.width = canvas.offsetWidth * ratio;
        canvas.height = canvas.offsetHeight * ratio;
        canvas.getContext("2d").scale(ratio, ratio);
        signaturePad.clear();
        signaturePad.fromData(oldContent);
    }


    /**
    *  Speichern des Inhaltes als Bild
    */
    function download(filename) {
        var blob = dataURLToBlob(signaturePad.toDataURL());
        var url = window.URL.createObjectURL(blob);

        var a = document.createElement("a");
        a.style = "display: none";
        a.href = url;
        a.download = filename;

        document.body.appendChild(a);
        a.click();

        window.URL.revokeObjectURL(url);
    }

    /**
    * DataURL in Binär umwandeln
    */
    function dataURLToBlob(dataURL) {
        // Code von https://github.com/ebidel/filer.js
        var parts = dataURL.split(';base64,');
        var contentType = parts[0].split(":")[1];
        var raw = window.atob(parts[1]);
        var rawLength = raw.length;
        var uInt8Array = new Uint8Array(rawLength);

        for (var i = 0; i < rawLength; ++i) {
            uInt8Array[i] = raw.charCodeAt(i);
        }

        return new Blob([uInt8Array], { type: contentType });
    }

    /**
    * Behanlung beim Absenden, damit der Inhalt des Canvas
    * übermittelt werden kann, wird dieser als DataURL dem
    * versteckten Feld zugewiesen
    */
    function submitForm() {

        document.getElementById('signature').value = signaturePad.toDataURL();



        $("#myForm").submit();
    }


    var signaturePad = new SignaturePad(canvas);
    signaturePad.minWidth = 1; //minimale Breite des Stiftes
    signaturePad.maxWidth = 5; //maximale Breite des Stiftes
    signaturePad.penColor = "#000000"; //Stiftfarbe
    signaturePad.backgroundColor = "#FFFFFF"; //Hintergrundfarbe

    window.onresize = resizeCanvas;
    resizeCanvas();

</script>
